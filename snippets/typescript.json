{
  "CRUD_MONGO": {
    "prefix": "crudmongocontroller",
    "body": [
      "import { NextFunction, Request, Response } from 'express';",
      "import mongoose from 'mongoose';",
      "import ${1:ModelName} from '../models/${1:ModelName}';",
      "",
      "const create${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const { ${3:StartName} } = req.body;",
      "",
      "  const ${2:VariableName} = new ${1:ModelName}({",
      "    _id: new mongoose.Types.ObjectId(),",
      "    ${3:StartName}",
      "  });",
      "",
      "  return ${2:VariableName}",
      "    .save()",
      "    .then((${2:VariableName}) => res.status(201).json({ ${2:VariableName} }))",
      "    .catch((err) => res.status(500).json({ err }));",
      "};",
      "",
      "const read${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
      "",
      "  return ${1:ModelName}.findById(${2:VariableName}Id)",
      "    .then((${2:VariableName}) => (${2:VariableName} ? res.status(200).json({ ${2:VariableName} }) : res.status(404).json({ message: 'Not Found' })))",
      "    .catch((err) => res.status(500).json({ err }));",
      "};",
      "",
      "const readAll${1:ModelName}s = (req: Request, res: Response, next: NextFunction) => {",
      "  return ${1:ModelName}.find()",
      "    .then((${2:VariableName}s) => res.status(200).json({ ${2:VariableName}s }))",
      "    .catch((err) => res.status(500).json({ err }));",
      "};",
      "",
      "const update${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
      "",
      "  return ${1:ModelName}.findById(${2:VariableName}Id)",
      "    .then((${2:VariableName}) => {",
      "      if (${2:VariableName}) {",
      "        ${2:VariableName}.set(req.body);",
      "",
      "        return ${2:VariableName}",
      "          .save()",
      "          .then((${2:VariableName}) => res.status(201).json({ ${2:VariableName} }))",
      "          .catch((err) => res.status(500).json({ err }));",
      "      } else {",
      "        res.status(404).json({ message: 'Not Found' });",
      "      }",
      "    })",
      "    .catch((err) => res.status(500).json({ err }));",
      "};",
      "",
      "const delete${1:ModelName} = (req: Request, res: Response, next: NextFunction) => {",
      "  const ${2:VariableName}Id = req.params.${2:VariableName}Id;",
      "",
      "  return ${1:ModelName}.findByIdAndDelete(${2:VariableName}Id)",
      "    .then((${2:VariableName}) => (${2:VariableName} ? res.status(201).json({ message: 'deleted' }) : res.status(404).json({ message: 'Not Found' })))",
      "    .catch((err) => res.status(500).json({ err }));",
      "};",
      "",
      "export default { create${1:ModelName}, read${1:ModelName}, readAll${1:ModelName}s, update${1:ModelName}, delete${1:ModelName} };",
      ""
    ]
  },
  "CRUD_MONGO_ROUTES": {
    "prefix": "crudmongoroutes",
    "body": [
      "import express from 'express';",
      "import controller from '../controllers/${1:ModelName}';",
      "",
      "const router = express.Router();",
      "",
      "router.post('/create', controller.create${1:ModelName});",
      "router.get('/get/:${2:VariableName}Id', controller.read${1:ModelName});",
      "router.get('/get', controller.readAll${1:ModelName}s);",
      "router.patch('/update/:${2:VariableName}Id', controller.update${1:ModelName});",
      "router.delete('/delete/:${2:VariableName}Id', controller.delete${1:ModelName});",
      "",
      "export = router;",
      ""
    ]
  },
  "MONGOOSE_MODEL": {
    "prefix": "mongoosemodel",
    "body": [
      "import mongoose, { Document, Schema } from 'mongoose';",
      "",
      "export interface I${1:ModelName} {",
      "  ${2:StartName}: ${3:StartType};",
      "}",
      "",
      "export interface I${1:ModelName}Model extends I${1:ModelName}, Document {}",
      "",
      "const ${1:ModelName}Schema: Schema = new Schema(",
      "  {",
      "    ${2:StartName}: { type: ${4:SchemaType}, required: true },",
      "  },",
      "  {",
      "    timestamps: true",
      "  }",
      ");",
      "",
      "export default mongoose.model<I${1:ModelName}Model>('${1:ModelName}', ${1:ModelName}Schema);",
      ""
    ]
  }
}
